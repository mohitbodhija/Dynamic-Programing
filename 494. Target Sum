class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        s= sum(nums)
        s1 = (s+target)//2
        l= len(nums)
        if abs(target)>sum(nums):
            return 0
        N=len(nums)
        sum1=(sum(nums)+target)/2
        sum2=(sum(nums)+target)//2
        if sum1!=(sum2):
            return 0
        
        
        dp = [[0 for _ in range(s1+1)]  for _ in range(l+1)]
        for i in range(s1+1):
            dp[0][i]=0
        dp[0][0] = 1
        for i in range(1,l+1):
            for j in range(s1+1):
                if(nums[i-1]<=j):
                    dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i-1]]
                else:
                    dp[i][j] = dp[i-1][j]
        return dp[-1][-1]
